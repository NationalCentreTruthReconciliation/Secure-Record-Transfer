# Generated by Django 4.2.20 on 2025-06-10 21:07

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def populate_site_settings(apps, schema_editor):
    """Populate SiteSetting model with initial values."""
    SiteSetting = apps.get_model("recordtransfer", "SiteSetting")

    settings_mapping = {
        # Email settings
        "ARCHIVIST_EMAIL": ("archivist@example.com", "str"),
        "DO_NOT_REPLY_USERNAME": ("do-not-reply", "str"),
        # Pagination
        "PAGINATE_BY": ("10", "int"),
        # CAAIS defaults
        "CAAIS_DEFAULT_REPOSITORY": ("", "str"),
        "CAAIS_DEFAULT_ACCESSION_TITLE": ("", "str"),
        "CAAIS_DEFAULT_ARCHIVAL_UNIT": ("", "str"),
        "CAAIS_DEFAULT_DISPOSITION_AUTHORITY": ("", "str"),
        "CAAIS_DEFAULT_ACQUISITION_METHOD": ("", "str"),
        "CAAIS_DEFAULT_STATUS": ("", "str"),
        "CAAIS_DEFAULT_SOURCE_CONFIDENTIALITY": ("", "str"),
        "CAAIS_DEFAULT_PRELIMINARY_CUSTODIAL_HISTORY": ("", "str"),
        "CAAIS_DEFAULT_DATE_OF_MATERIALS": ("", "str"),
        "CAAIS_DEFAULT_EXTENT_TYPE": ("", "str"),
        "CAAIS_DEFAULT_QUANTITY_AND_UNIT_OF_MEASURE": ("", "str"),
        "CAAIS_DEFAULT_CONTENT_TYPE": ("", "str"),
        "CAAIS_DEFAULT_CARRIER_TYPE": ("", "str"),
        "CAAIS_DEFAULT_EXTENT_NOTE": ("", "str"),
        "CAAIS_DEFAULT_PRELIMINARY_SCOPE_AND_CONTENT": ("", "str"),
        "CAAIS_DEFAULT_LANGUAGE_OF_MATERIAL": ("", "str"),
        "CAAIS_DEFAULT_STORAGE_LOCATION": ("", "str"),
        "CAAIS_DEFAULT_PRESERVATION_REQUIREMENTS_TYPE": ("", "str"),
        "CAAIS_DEFAULT_PRESERVATION_REQUIREMENTS_VALUE": ("", "str"),
        "CAAIS_DEFAULT_PRESERVATION_REQUIREMENTS_NOTE": ("", "str"),
        "CAAIS_DEFAULT_APPRAISAL_TYPE": ("", "str"),
        "CAAIS_DEFAULT_APPRAISAL_VALUE": ("", "str"),
        "CAAIS_DEFAULT_APPRAISAL_NOTE": ("", "str"),
        "CAAIS_DEFAULT_ASSOCIATED_DOCUMENTATION_TYPE": ("", "str"),
        "CAAIS_DEFAULT_ASSOCIATED_DOCUMENTATION_TITLE": ("", "str"),
        "CAAIS_DEFAULT_ASSOCIATED_DOCUMENTATION_NOTE": ("", "str"),
        "CAAIS_DEFAULT_GENERAL_NOTE": ("", "str"),
        "CAAIS_DEFAULT_RULES_OR_CONVENTIONS": ("", "str"),
        "CAAIS_DEFAULT_LANGUAGE_OF_ACCESSION_RECORD": ("", "str"),
        # CAAIS event defaults
        "CAAIS_DEFAULT_EVENT_TYPE": ("Transfer Submitted", "str"),
        "CAAIS_DEFAULT_EVENT_AGENT": ("", "str"),
        "CAAIS_DEFAULT_EVENT_NOTE": ("", "str"),
        # CAAIS creation defaults
        "CAAIS_DEFAULT_CREATION_TYPE": ("Creation", "str"),
        "CAAIS_DEFAULT_CREATION_AGENT": ("", "str"),
        "CAAIS_DEFAULT_CREATION_NOTE": ("", "str"),
    }

    # Create SiteSetting objects for each setting
    settings_to_create = []
    for key, (value, value_type) in settings_mapping.items():
        settings_to_create.append(SiteSetting(key=key, value=str(value), value_type=value_type))

    # Bulk create all settings
    SiteSetting.objects.bulk_create(settings_to_create)


class Migration(migrations.Migration):
    dependencies = [
        ("recordtransfer", "0049_remove_user_confirmed_email"),
    ]

    operations = [
        migrations.CreateModel(
            name="SiteSetting",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                ("key", models.CharField(max_length=255, unique=True)),
                ("value", models.TextField()),
                (
                    "value_type",
                    models.CharField(
                        choices=[("int", "Integer"), ("str", "String")],
                        max_length=8,
                        verbose_name="Setting value type",
                    ),
                ),
                (
                    "change_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="Change date"),
                ),
                (
                    "changed_by",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Changed by",
                    ),
                ),
            ],
        ),
        migrations.RunPython(populate_site_settings, reverse_code=migrations.RunPython.noop),
    ]
