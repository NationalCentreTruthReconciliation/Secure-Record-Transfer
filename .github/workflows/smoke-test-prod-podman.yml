name: Production Smoke Test Podman (via compose.prod.yml)

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  smoke-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Copy environment file
        run: cp example.prod.env .prod.env

      - name: Add SECRET_KEY to environment file
        run: |
          echo -e "\nSECRET_KEY=${{ secrets.SECRET_KEY }}" >> .prod.env
      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get -y install podman
          pip install podman-compose

          echo "$HOME/.local/bin" >> $GITHUB_PATH

          podman --version
          which podman-compose

      - name: Start containers
        run: podman-compose -f compose.prod.yml up -d

      - name: Wait for database to be ready
        run: |
            echo "Waiting for database to be ready..."
            timeout=90
            elapsed=0

            # Wait for database to start accepting connections
            until [ $elapsed -ge $timeout ] || podman exec $(podman ps -q --filter name=db) mysql --no-defaults -u records-user -precords-password -e "SELECT 1" &>/dev/null; do
            sleep 10
            elapsed=$((elapsed+10))
            echo "Database still initializing... ($elapsed/$timeout seconds)"
            done

            if [ $elapsed -ge $timeout ]; then
            echo "Database initialization timed out"
            podman-compose -f compose.prod.yml logs db
            exit 1
            fi

            echo "Database is ready"

      - name: Wait for app to start
        run: |
            timeout=60
            elapsed=0
            echo "Waiting for application to be ready (will time out after ${timeout}s)..."
            # First wait for ">> Starting app" which appears early
            until [ $elapsed -ge $timeout ] || podman-compose -f compose.prod.yml logs app | grep -q ">> Starting app"; do

            sleep 5
            elapsed=$((elapsed+5))
            echo "Waiting for initial app startup... ($elapsed/$timeout seconds elapsed)"
            done
            if [ $elapsed -ge $timeout ]; then
            echo "Timeout reached. Application did not start initialization."
            podman-compose -f compose.prod.yml logs app

            exit 1
            fi
            echo "✅ App initialization detected, waiting for Gunicorn to start..."
            # Wait additional time for Gunicorn to start after seeing ">> Starting app"
            sleep 15
            # Now capture logs which should include Gunicorn startup messages
            # Using 2>&1 to capture both stdout and stderr
            podman-compose -f compose.prod.yml logs app > app_logs.txt 2>&1

            # Check if Gunicorn messages are present in the captured logs
            if grep -q "Listening at: http://0.0.0.0:8000" app_logs.txt || grep -q "Booting worker with pid" app_logs.txt; then
            echo "✅ Gunicorn is listening on port 8000"
            echo "Application is ready!"
            exit 0
            else
            # If log detection fails, fall back to HTTP check
            echo "⚠️ Gunicorn startup messages not found in logs, trying HTTP check..."
            # Show what we captured for debugging
            echo "Contents of log file (last 20 lines):"
            tail -20 app_logs.txt
            if curl -s --connect-timeout 2 http://localhost:1337/ > /dev/null; then
                echo "✅ Application is responding to HTTP requests!"
                echo "Application is ready!"
                exit 0
            else
                echo "Timeout reached. Application did not start properly."
                cat app_logs.txt
                exit 1
            fi
            fi
      # The port number is set in the compose.prod.yml file
      - name: Check homepage status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:1337/)
          if [ $response -eq 200 ]; then
            echo "Homepage is returning 200 OK in production configuration"
            exit 0
          else
            echo "Homepage returned status code $response in production configuration"
            exit 1
          fi

      - name: Stop containers
        if: always()
        run: podman-compose -f compose.prod.yml down -v
