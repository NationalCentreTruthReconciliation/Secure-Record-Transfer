name: Production Smoke Test Podman (via compose.prod.yml)

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  smoke-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Copy environment file
        run: cp example.prod.env .prod.env

      - name: Add SECRET_KEY to environment file
        run: |
          echo -e "\nSECRET_KEY=${{ secrets.SECRET_KEY }}" >> .prod.env

      - name: Set up Podman and dependencies
        run: |
            sudo apt-get update
            sudo apt-get -y install podman

            pip install uv
            uv sync --extra dev --extra podman
            # Install podman-compose directly and make sure it's in PATH
            pip install podman-compose==1.3.0

            # Verify installations
            podman --version
            podman-compose --version

            echo -e "[engine]\nvolumes_dir=\"/home/runner/.local/share/containers/storage/volumes\"" | sudo tee /etc/containers/containers.conf
            podman info

      - name: Start containers
        run: podman-compose -f compose.prod.yml up -d --build

      - name: Wait for app to start
        run: |
          timeout=30
          elapsed=0
          echo "Waiting for application to be ready (will time out after ${timeout}s)..."
          until [ $elapsed -ge $timeout ] || podman-compose -f compose.prod.yml logs app | grep -q "Listening at: http://0.0.0.0:8000"; do
            sleep 5
            elapsed=$((elapsed+5))
            echo "Still waiting... ($elapsed/$timeout seconds elapsed)"
          done
          if [ $elapsed -ge $timeout ]; then
            echo "Timeout reached. Application did not start properly."
            podman-compose -f compose.prod.yml logs app
            exit 1
          fi
          echo "Application is ready!"

      # The port number is set in the compose.prod.yml file
      - name: Check homepage status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:1337/)
          if [ $response -eq 200 ]; then
            echo "Homepage is returning 200 OK in production configuration"
            exit 0
          else
            echo "Homepage returned status code $response in production configuration"
            exit 1
          fi

      - name: Stop containers
        if: always()
        run: podman-compose -f compose.prod.yml down -v
