name: Production Smoke Test Podman (via compose.prod.yml)

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  smoke-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Copy environment file
        run: cp example.prod.env .prod.env

      - name: Add SECRET_KEY to environment file
        run: |
          echo -e "\nSECRET_KEY=${{ secrets.SECRET_KEY }}" >> .prod.env

      - name: Set up Podman and dependencies
        run: |
            sudo apt-get update
            sudo apt-get -y install podman

            pip install uv
            uv sync --extra dev --extra podman
            # Install podman-compose directly and make sure it's in PATH
            pip install podman-compose==1.3.0

            # Verify installations
            podman --version
            podman-compose --version

            echo -e "[engine]\nvolumes_dir=\"/home/runner/.local/share/containers/storage/volumes\"" | sudo tee /etc/containers/containers.conf
            podman info

      - name: Start containers
        run: podman-compose -f compose.prod.yml up -d --build

      - name: Wait for database to be ready
        run: |
            echo "Waiting for database to initialize..."
            timeout=60
            elapsed=0
            until [ $elapsed -ge $timeout ] || podman-compose -f compose.prod.yml logs db | grep -q "port: 3306.*ready for connections"; do
            sleep 5
            elapsed=$((elapsed+5))
            echo "DB still initializing... ($elapsed/$timeout seconds)"
            done

            if [ $elapsed -ge $timeout ]; then
            echo "Database initialization timed out. Logs:"
            podman-compose -f compose.prod.yml logs db
            exit 1
            fi

            echo "Database is ready!"

      - name: Wait for app to start
        run: |
            echo "Waiting for application to be ready (checking actual container status)..."
            timeout=60
            elapsed=0

            until [ $elapsed -ge $timeout ]; do
            # Check if container is running
            if podman ps --filter name=app --filter status=running | grep -q app; then
                # Check if app is responding to HTTP requests - trying both internal and external ports
                if curl -s http://localhost:1337/ | grep -q "Record Transfer"; then
                echo "Application is ready and responding to HTTP requests!"
                break
                fi
            fi

            sleep 5
            elapsed=$((elapsed+5))
            echo "Still waiting for app to be responsive... ($elapsed/$timeout seconds)"
            done

            if [ $elapsed -ge $timeout ]; then
            echo "Timeout reached. Application did not start properly."
            echo "Container status:"
            podman ps -a
            echo "App logs:"
            podman-compose -f compose.prod.yml logs app
            echo "Database logs:"
            podman-compose -f compose.prod.yml logs db
            echo "Nginx logs:"
            podman-compose -f compose.prod.yml logs nginx
            exit 1
            fi

      # The port number is set in the compose.prod.yml file
      - name: Check homepage status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:1337/)
          if [ $response -eq 200 ]; then
            echo "Homepage is returning 200 OK in production configuration"
            exit 0
          else
            echo "Homepage returned status code $response in production configuration"
            exit 1
          fi

      - name: Stop containers
        if: always()
        run: podman-compose -f compose.prod.yml down -v
