name: Production Smoke Test Podman (via compose.prod.yml)

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  smoke-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Copy environment file
        run: cp example.prod.env .prod.env

      - name: Add SECRET_KEY to environment file
        run: |
          echo -e "\nSECRET_KEY=${{ secrets.SECRET_KEY }}" >> .prod.env

      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get -y install podman

          # Install podman-compose
          pip install podman-compose

          # Add to PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH

          # Verify installations
          podman --version
          which podman-compose

      - name: Start containers
        run: podman-compose -f compose.prod.yml up -d

      - name: Wait for database to be ready
        run: |
            echo "Waiting for database to be ready..."
            timeout=90
            elapsed=0

            # Wait for database to start accepting connections
            until [ $elapsed -ge $timeout ] || podman exec $(podman ps -q --filter name=db) mysql --no-defaults -u records-user -precords-password -e "SELECT 1" &>/dev/null; do
            sleep 10
            elapsed=$((elapsed+10))
            echo "Database still initializing... ($elapsed/$timeout seconds)"
            done

            if [ $elapsed -ge $timeout ]; then
            echo "Database initialization timed out"
            podman-compose -f compose.prod.yml logs db
            exit 1
            fi

            echo "Database is ready"

      - name: Wait for app to start
        run: |
            # Increased timeout for Podman which may be slightly slower
            timeout=60
            elapsed=0
            echo "Waiting for application to be ready (will time out after ${timeout}s)..."

            # First, try to detect the ">> Starting app" message which appears early
            until [ $elapsed -ge 20 ]; do
            app_logs=$(podman-compose -f compose.prod.yml logs app)
            if echo "$app_logs" | grep -q ">> Starting app"; then
                echo "✅ Found initial '>> Starting app' message, waiting for Gunicorn..."

                # Start capturing logs with follow to get new log entries in real-time
                echo "Starting log capture with follow..."
                podman-compose -f compose.prod.yml logs -f app > app_logs_follow.txt &
                LOG_PID=$!

                # Wait for Gunicorn to start after seeing this message
                echo "Waiting 15 seconds for Gunicorn to start..."
                sleep 15

                # Stop the log capture
                kill $LOG_PID || true

                # Check if we captured Gunicorn logs
                if grep -q "Listening at: http://0.0.0.0:8000" app_logs_follow.txt || \
                grep -q "Booting worker with pid" app_logs_follow.txt; then
                echo "✅ Gunicorn startup detected in follow logs!"

                # Wait a moment for the app to fully initialize
                echo "Waiting 10 more seconds for app to stabilize..."
                sleep 10

                # Try a simple curl check to confirm the app is responding
                if curl -s -m 5 http://localhost:1337/ > /dev/null; then
                    echo "✅ Application is responding to HTTP requests!"
                    echo "Application is ready!"
                    exit 0
                else
                    echo "⚠️ Application started but not responding yet. Continuing anyway..."
                    echo "Application is ready (but not yet responding to HTTP requests)!"
                    exit 0
                fi
                fi

                # If we didn't find Gunicorn logs in the follow, break and continue with normal flow
                echo "Didn't find Gunicorn logs in follow, continuing with normal flow..."
                break
            fi
            sleep 5
            elapsed=$((elapsed+5))
            echo "Waiting for initial app startup... ($elapsed/20 seconds elapsed)"
            done

            # Reset and continue with main detection loop
            elapsed=0
            while [ $elapsed -le $timeout ]; do
            # Try curl check first as it's more reliable
            if [ $elapsed -ge 20 ] && curl -s --connect-timeout 2 http://localhost:1337/ > /dev/null; then
                echo "✅ Application is responding to HTTP requests!"
                exit 0
            fi

            # Get the latest logs
            podman-compose -f compose.prod.yml logs app > app_logs.txt

            # Check for Gunicorn startup patterns
            if grep -q "Listening at: http://0.0.0.0:8000" app_logs.txt || \
                grep -q "Booting worker with pid" app_logs.txt; then
                echo "✅ Gunicorn startup detected in logs!"

                # Wait a moment for the app to fully initialize
                echo "Waiting 10 more seconds for app to stabilize..."
                sleep 10

                # Try a simple curl check to confirm the app is responding
                if curl -s -m 5 http://localhost:1337/ > /dev/null; then
                echo "✅ Application is responding to HTTP requests!"
                echo "Application is ready!"
                exit 0
                else
                echo "⚠️ Application started but not responding yet. Continuing anyway..."
                echo "Application is ready (but not yet responding to HTTP requests)!"
                exit 0
                fi
            fi

            sleep 5
            elapsed=$((elapsed+5))
            echo "Still waiting... ($elapsed/$timeout seconds elapsed)"

            # Every 20 seconds, show the current logs
            if [ $((elapsed % 20)) -eq 0 ]; then
                echo "Current app logs:"
                tail -20 app_logs.txt
            fi
            done

            echo "Timeout reached. Application did not start properly."
            cat app_logs.txt
            exit 1
      # The port number is set in the compose.prod.yml file
      - name: Check homepage status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:1337/)
          if [ $response -eq 200 ]; then
            echo "Homepage is returning 200 OK in production configuration"
            exit 0
          else
            echo "Homepage returned status code $response in production configuration"
            exit 1
          fi

      - name: Stop containers
        if: always()
        run: podman-compose -f compose.prod.yml down -v