name: Production Smoke Test Podman (via compose.prod.yml)

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  smoke-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Copy environment file
        run: cp example.prod.env .prod.env

      - name: Add SECRET_KEY to environment file
        run: |
          echo -e "\nSECRET_KEY=${{ secrets.SECRET_KEY }}" >> .prod.env

      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get -y install podman

          # Install podman-compose
          pip install podman-compose

          # Add to PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH

          # Verify installations
          podman --version
          which podman-compose

      - name: Start containers
        run: podman-compose -f compose.prod.yml up -d

      - name: Wait for database to be ready
        run: |
            echo "Waiting for database to be ready..."
            timeout=90
            elapsed=0

            # Wait for database to start accepting connections
            until [ $elapsed -ge $timeout ] || podman exec $(podman ps -q --filter name=db) mysql --no-defaults -u records-user -precords-password -e "SELECT 1" &>/dev/null; do
            sleep 10
            elapsed=$((elapsed+10))
            echo "Database still initializing... ($elapsed/$timeout seconds)"
            done

            if [ $elapsed -ge $timeout ]; then
            echo "Database initialization timed out"
            podman-compose -f compose.prod.yml logs db
            exit 1
            fi

            echo "Database is ready"

      - name: Wait for app to start
        run: |
            # Increased timeout for Podman which may be slightly slower
            timeout=60  # Increased from 45s
            elapsed=0
            echo "Waiting for application to be ready (will time out after ${timeout}s)..."
            app_ready=false

            until [ $elapsed -ge $timeout ] || [ "$app_ready" = true ]; do
            # Check for ANY of these success signals
            if podman-compose -f compose.prod.yml logs app | grep -q "Booting worker with pid"; then
                echo "✅ Worker boot detected - app is starting!"
                app_ready=true
                break
            fi

            sleep 5
            elapsed=$((elapsed+5))
            echo "Still waiting... ($elapsed/$timeout seconds elapsed)"

            # If we're halfway through, try an alternative check
            if [ $elapsed -ge 30 ] && ! [ "$app_ready" = true ]; then
                echo "Trying alternative detection method..."
                if podman exec $(podman ps -q --filter name=app) ps aux | grep -q gunicorn; then
                echo "✅ Found gunicorn process running in app container!"
                app_ready=true
                break
                fi
            fi
            done

            if [ $elapsed -ge $timeout ]; then
            echo "Timeout reached. Application did not start properly. Final logs:"
            podman-compose -f compose.prod.yml logs app
            exit 1
            fi

            # Wait a bit longer to ensure app is fully initialized
            echo "Application process detected! Waiting 10 seconds for initialization to complete..."
            sleep 10

            echo "Checking if app is responding to web requests..."
            max_attempts=3
            for attempt in $(seq 1 $max_attempts); do
            if curl -s http://localhost:1337 | grep -q "Record Transfer"; then
                echo "✅ Application is responding to web requests!"
                break
            elif [ $attempt -eq $max_attempts ]; then
                echo "⚠️ Application started but not responding to web requests yet. Proceeding anyway..."
            else
                echo "Waiting for app to respond to web requests (attempt $attempt/$max_attempts)"
                sleep 5
            fi
            done

            echo "Application is ready!"

      # The port number is set in the compose.prod.yml file
      - name: Check homepage status
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:1337/)
          if [ $response -eq 200 ]; then
            echo "Homepage is returning 200 OK in production configuration"
            exit 0
          else
            echo "Homepage returned status code $response in production configuration"
            exit 1
          fi

      - name: Stop containers
        if: always()
        run: podman-compose -f compose.prod.yml down -v