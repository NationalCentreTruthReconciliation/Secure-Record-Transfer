name: Production Smoke Test Podman (via compose.prod.yml)

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  smoke-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Copy environment file
        run: cp example.prod.env .prod.env

      - name: Add SECRET_KEY to environment file
        run: |
          echo -e "\nSECRET_KEY=${{ secrets.SECRET_KEY }}" >> .prod.env

      - name: Set up Podman and dependencies
        run: |
            sudo apt-get update
            sudo apt-get -y install podman

            pip install uv
            uv sync --extra dev --extra podman
            # Install podman-compose directly and make sure it's in PATH
            pip install podman-compose==1.3.0

            # Verify installations
            podman --version
            podman-compose --version

            echo -e "[engine]\nvolumes_dir=\"/home/runner/.local/share/containers/storage/volumes\"" | sudo tee /etc/containers/containers.conf
            podman info

      - name: Start containers
        run: podman-compose -f compose.prod.yml up -d --build

      - name: Wait for database to be ready
        run: |
            echo "Waiting for database to initialize..."
            timeout=90
            elapsed=0
            db_ready=false

            until [ $elapsed -ge $timeout ] || [ "$db_ready" = true ]; do
            # Check for either of the MySQL ready messages
            if podman-compose -f compose.prod.yml logs db | grep -q "MySQL init process done. Ready for start up" || \
                podman-compose -f compose.prod.yml logs db | grep -q "port: 3306.*ready for connections"; then
                echo "✅ Database initialization detected!"
                db_ready=true
                # Wait a longer time for MySQL to actually start listening (increased from 5s to 20s)
                echo "Waiting for MySQL to start accepting connections..."
                sleep 20
                break
            fi

            sleep 5
            elapsed=$((elapsed+5))
            echo "DB still initializing... ($elapsed/$timeout seconds)"
            done

            if [ $elapsed -ge $timeout ]; then
            echo "❌ Database initialization timed out. Logs:"
            podman-compose -f compose.prod.yml logs db
            exit 1
            fi

            # Multiple connection attempts with backoff
            max_attempts=5
            attempt=0
            connected=false

            echo "Testing database connection..."
            while [ $attempt -lt $max_attempts ] && [ "$connected" = false ]; do
            attempt=$((attempt+1))
            echo "Connection attempt $attempt of $max_attempts..."

            if podman exec $(podman ps -q --filter name=db) mysql -u records-user -p'records-password' -h localhost -e "SELECT 1;" > /dev/null 2>&1; then
                echo "✅ Database connection successful!"
                connected=true
            else
                echo "⚠️ Connection attempt failed, waiting before retry..."
                sleep 10
            fi
            done

            if [ "$connected" = false ]; then
            echo "❌ Database is not accepting connections after $max_attempts attempts. Additional logs:"
            podman-compose -f compose.prod.yml logs db
            podman exec $(podman ps -q --filter name=db) ps aux
            podman network inspect $(podman network ls -q)
            exit 1
            fi

            echo "✅ Database is ready and accepting connections!"      # The port number is set in the compose.prod.yml file
      - name: Check homepage status
        run: |
            response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:1337/)
            if [ $response -eq 200 ]; then
                echo "Homepage is returning 200 OK in production configuration"
                exit 0
            else
                echo "Homepage returned status code $response in production configuration"
                exit 1
            fi

      - name: Stop containers
        if: always()
        run: podman-compose -f compose.prod.yml down -v
